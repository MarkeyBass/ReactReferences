{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","match","useRouteMatch","console","log","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCkBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,kBAAaN,EAAMO,IAA3C,iC,iBC6DSC,EAvDG,SAACR,GAGjB,IAAMS,EAAQC,cACdC,QAAQC,IAAI,CAAEH,MAAOA,IAErB,IAhBkBI,EAAQC,EAgBpBC,EAAUC,cAEVC,EAAWC,cAOXC,EAAiD,QAFnC,IAAIC,gBAAgBH,EAASI,QAEVC,IAAI,QAGrCC,GA5BYV,EA4Bcb,EAAMa,OA5BZC,EA4BoBK,EA3BvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOlB,GAAKmB,EAAOnB,GAAK,GAAK,EAE7BkB,EAAOlB,GAAKmB,EAAOnB,GAAK,GAAK,MAsCxC,OACE,eAAC,WAAD,WACE,qBAAKN,UAAWC,IAAQyB,QAAxB,SAEE,yBAAQC,QAjBe,WAO3Bb,EAAQc,KAAK,CACXC,SAAUb,EAASa,SACnBT,OAAO,SAAD,OAAWF,EAAqB,OAAS,UAQ7C,kBACQA,EAAqB,aAAe,iBAG9C,oBAAIlB,UAAWC,IAAQ6B,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEE1B,GAAI0B,EAAM1B,GACVF,OAAQ4B,EAAM5B,OACdD,KAAM6B,EAAM7B,MAHP6B,EAAM1B,a,yBChDR2B,EAXO,WACpB,OACE,sBAAKjC,UAAWC,IAAQiC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAM7B,GAAG,aAAaL,UAAU,MAAhC,6B,gBCgFSmC,UA/BG,WAChB,MAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAOF,OAJAC,qBAAU,WACRL,MACC,CAACA,IAEW,YAAXC,EAEA,qBAAKvC,UAAU,WAAf,SACE,cAAC4C,EAAA,EAAD,MAKFF,EACK,mBAAG1C,UAAU,mBAAb,SAAiC0C,IAG3B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAItD,cAAC,EAAD,CAAWjC,OAAQ4B,IAHjB,cAAC,EAAD","file":"static/js/5.a06db5d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2XnJm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3EIjt\",\"sorting\":\"QuoteList_sorting__2J9zq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3fIv8\"};","import classes from \"./QuoteItem.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className=\"btn\" to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","// USING QUERY PARAMETERS\n\nimport { Fragment } from \"react\";\nimport { useHistory, useLocation, useRouteMatch } from \"react-router\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  // UseRoutMatch - helps us to not repeate rout folder names in nested routes\n  // Helps us to constract the nested routes dinamically.\n  const match = useRouteMatch();\n  console.log({ match: match });\n\n  const history = useHistory();\n  // useLocation gives info about the current used url (reading query parameter values)\n  const location = useLocation();\n  // console.log({ location: location });\n\n  // URLSearchParams ia a browser built in constructor function receives location.search and\n  // returns a nice params object where we can extract query parameters by key { sort: asc }\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n\n  // sorting the list items:\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    // history.push(\"/quotes?sort=\" + \"asc\");\n    // // history.push(\"/quotes?sort=\" + (isSortingAscending ? \"desc\" : \"asc\"));\n    // history.push(\n    //   `${location.pathname}?sort=${isSortingAscending ? \"desc\" : \"asc\"}`\n    // );\n    // Programatic Navidation with history.push() - More readble approach with complex urls:\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${isSortingAscending ? \"desc\" : \"asc\"}`,\n    });\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        {/* changes the query parameter {acsending || descending} */}\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from \"react-router-dom\";\nimport classes from \"./NoQuotesFound.module.css\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to=\"/new-quote\" className=\"btn\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// import { useEffect } from \"react/cjs/react.production.min\";\r\n// import NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\n// import QuoteList from \"../components/quotes/QuoteList\";\r\n// import LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n// import useHttp from \"../hooks/use-http\";\r\n// import { getAllQuotes } from \"../lib/api\";\r\n\r\n// // const loadedQuotes = [\r\n// //   { id: 1, author: \"Bob Marley\", text: \"Take it easy\" },\r\n// //   { id: 2, author: \"Dave Buback\", text: \"Take 5\" },\r\n// // ];\r\n\r\n// const AllQuotes = () => {\r\n//   const {\r\n//     sendRequest,\r\n//     status,\r\n//     data: loadedQuotes,\r\n//     error,\r\n//   } = useHttp(getAllQuotes, true);\r\n\r\n//   useEffect(() => {\r\n//     sendRequest();\r\n//   }, [sendRequest]);\r\n\r\n//   if (status === \"pending\") {\r\n//     return (\r\n//       <div className=\"centered\">\r\n//         <LoadingSpinner />\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (error) return <p className=\"centered focused\">{error}</p>;\r\n\r\n//   if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n//     return <NoQuotesFound />;\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>All Quotes</h1>\r\n//       <QuoteList quotes={loadedQuotes} />;\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AllQuotes;\r\n\r\nimport { useEffect } from \"react\";\r\n\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\n\r\nconst AllQuotes = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getAllQuotes, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n    return <NoQuotesFound />;\r\n  }\r\n\r\n  return <QuoteList quotes={loadedQuotes} />;\r\n};\r\n\r\nexport default AllQuotes;\r\n"],"sourceRoot":""}