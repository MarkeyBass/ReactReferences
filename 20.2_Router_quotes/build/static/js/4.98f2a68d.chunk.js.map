{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","status","sendRequest","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,MAAQ,kC,mBCA1BD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,0ECUdC,EATU,SAACC,GACxB,OACE,yBAAQC,UAAWC,IAAQC,MAA3B,UACE,4BAAIH,EAAMI,OACV,qCAAaJ,EAAMK,a,gFC6CVC,EA3CQ,SAACN,GACtB,IAAMO,EAAiBC,mBAEvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,MAErBC,EAAmBd,EAAnBc,eAERC,qBAAU,WACO,cAAXJ,GAA2BE,GAC7BC,MAED,CAACH,EAAQE,EAAOC,IAEnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAcZ,EAAea,QAAQC,MAI3CT,EAAY,CAAEU,YAAa,CAAElB,KAAMe,GAAeI,QAASvB,EAAMuB,UAEjEhB,EAAea,QAAQC,MAAQ,IAGjC,OACE,uBAAMpB,UAAWC,IAAQsB,KAAMC,SAAUT,EAAzC,UACc,YAAXL,GACC,qBAAKV,UAAU,WAAf,SACE,cAACyB,EAAA,EAAD,MAGJ,sBAAKzB,UAAWC,IAAQyB,QAASF,SAAUT,EAA3C,UACE,uBAAOY,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKxB,OAEvC,qBAAKN,UAAWC,IAAQ8B,QAAxB,SACE,wBAAQ/B,UAAU,MAAlB,+B,iBCnCOgC,EARK,SAACjC,GACnB,OACE,oBAAIC,UAAWC,IAAQgC,KAAvB,SACE,4BAAIlC,EAAMI,U,iBCQD+B,EAVM,SAACnC,GACpB,OACE,oBAAIC,UAAWC,IAAQkC,SAAvB,SACGpC,EAAMoC,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BlC,KAAMkC,EAAQlC,MAA1BkC,EAAQT,UCsEnBU,EAjEE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEQnB,EADOoB,cACPpB,QAER,EAKId,YAAQmC,KAJJC,EADR,EACEC,KACAnC,EAFF,EAEEA,OACAE,EAHF,EAGEA,MACAD,EAJF,EAIEA,YAGFG,qBAAU,WACRH,EAAYW,KACX,CAACX,EAAaW,IAEjB,IAQIa,EAJEW,EAAsBC,uBAAY,WACtCpC,EAAYW,KACX,CAACX,EAAaW,IAwBjB,MArBe,YAAXZ,IACFyB,EACE,qBAAKnC,UAAU,WAAf,SACE,cAACyB,EAAA,EAAD,OAIS,cAAXf,GAA0BkC,GAAkBA,EAAeI,OAAS,IACtEb,EAAW,cAAC,EAAD,CAAcA,SAAUS,KAIxB,cAAXlC,GACEkC,GAA4C,IAA1BA,EAAeI,SAEnCb,EAAW,mBAAGnC,UAAU,WAAb,0CAGE,cAAXU,GAA0BE,IAC5BuB,EAAW,mBAAGnC,UAAU,WAAb,SAAyBY,KAGpC,0BAASZ,UAAWC,IAAQkC,SAA5B,UACE,gDACEK,GACA,wBAAQxC,UAAU,MAAMiD,QAlCC,WAC7BR,GAAmB,IAiCf,2BAIDD,GACC,cAAC,EAAD,CACElB,QAASA,EACTT,eAAgBiC,IAGnBX,MCIQe,UAlEf,WAEE,IAAMC,EAAQC,cAGN9B,EAFOoB,cAEPpB,QAKR,EAKId,YAAQ6C,KAAgB,GAJ1B1C,EADF,EACEA,YACAD,EAFF,EAEEA,OACM4C,EAHR,EAGET,KACAjC,EAJF,EAIEA,MAOF,OAJAE,qBAAU,WACRH,EAAYW,KACX,CAACX,EAAaW,IAEF,YAAXZ,EAEA,qBAAKV,UAAU,WAAf,SACE,cAACyB,EAAA,EAAD,MAKFb,EACK,mBAAGZ,UAAU,WAAb,SAAyBY,IAG7B0C,EAAYnD,KASf,gCACE,cAAC,EAAD,CAAkBC,OAAQkD,EAAYlD,OAAQD,KAAMmD,EAAYnD,OAGhE,cAAC,IAAD,CAAOoD,KAAMJ,EAAMI,KAAMC,OAAK,EAA9B,SACE,qBAAKxD,UAAU,WAAf,SAEE,cAAC,IAAD,CAAMA,UAAU,YAAYyD,GAAE,UAAKN,EAAMO,IAAX,aAA9B,+BAKJ,eAAC,IAAD,CAAOH,KAAI,UAAKJ,EAAMI,KAAX,aAAX,UACE,qBAAKvD,UAAU,WAAf,SACE,cAAC,IAAD,CAAMA,UAAU,YAAYyD,GAAIN,EAAMO,IAAtC,6BAIF,cAAC,EAAD,UAzBF,qBAAK1D,UAAU,WAAf,SACE","file":"static/js/4.98f2a68d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3DceB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1SH6I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3_XVX\",\"loading\":\"NewCommentForm_loading__2FYTy\",\"control\":\"NewCommentForm_control__3KCVy\",\"actions\":\"NewCommentForm_actions__1cj0y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3ltKn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__kbpHY\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\n\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { status, sendRequest, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n\n    commentTextRef.current.value = \"\";\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\n\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const {\n    data: loadedComments,\n    status,\n    error,\n    sendRequest,\n  } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  if (status === \"completed\" && error)\n    comments = <p className=\"centered\">{error}</p>;\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import React, { useEffect } from \"react\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\n// Handles http status\r\nimport useHttp from \"../hooks/use-http\";\r\n// The fuction that sends the actual request\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nfunction QuoteDetail() {\r\n  // UseRoutMatch - helps us to not repeate rout folder names in nested routes (constract the nested routes dinamically)\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n  // console.log(match);\r\n\r\n  // console.log({ quoteId: params.quoteId });\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <p>No quote found!</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <HighlightedQuote author={loadedQuote.author} text={loadedQuote.text} />\r\n      {/* This nested route is rendering conditionally the button based on the url without managing state */}\r\n      {/* <Route path={`/quotes/${params.quoteId}`} exact> */}\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          {/* <Link className=\"btn--flat\" to={`/quotes/${params.quoteId}/comments`}> */}\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Show Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={match.url}>\r\n            Hide Comments\r\n          </Link>\r\n        </div>\r\n        <Comments />\r\n      </Route>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}